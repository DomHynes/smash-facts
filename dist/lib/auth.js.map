{"version":3,"sources":["../../src/lib/auth.js"],"names":["twitterCallback","serializeUser","deserializeUser","isLoggedIn","accessToken","refreshToken","profile","cb","findOne","oauthID","id","exec","then","result","indexOf","username","toLowerCase","console","log","name","save","user","catch","findById","err","req","res","next","isAuthenticated","redirect"],"mappings":";;;;;QAGgBA,e,GAAAA,e;QAoBAC,a,GAAAA,a;QAGAC,e,GAAAA,e;QAIAC,U,GAAAA,U;;AA9BhB;;;;AACA;;;;;;AAEO,SAASH,eAAT,CAAyBI,WAAzB,EAAsCC,YAAtC,EAAoDC,OAApD,EAA6DC,EAA7D,EAAiE;AACtE,iBAAKC,OAAL,CAAa,EAAEC,sBAAoBH,QAAQI,EAA9B,EAAb,EAAmDC,IAAnD,GACGC,IADH,CACS,UAACC,MAAD,EAAY;AACjB,QAAIA,MAAJ,EAAY;AAAC;AAAO,KAApB,MACK,IAAK,wBAAcC,OAAd,CAAsBR,QAAQS,QAAR,CAAiBC,WAAjB,EAAtB,MAA0D,CAAC,CAAhE,EAAoE;AACvEC,cAAQC,GAAR,CAAY,+CAA+CZ,QAAQS,QAAnE;AACA;AACD;AACDE,YAAQC,GAAR,CAAY,8CAA8CZ,QAAQS,QAAlE;AACA,WAAO,mBAAS;AACdN,4BAAoBH,QAAQI,EADd;AAEdS,YAAMb,QAAQS;AAFA,KAAT,EAGJK,IAHI,EAAP;AAID,GAZH,EAaGR,IAbH,CAaS,gBAAQ;AACbL,OAAG,IAAH,EAASc,IAAT;AACD,GAfH,EAgBGC,KAhBH,CAgBUf,EAhBV;AAiBD;;AAEM,SAASN,aAAT,CAAuBoB,IAAvB,EAA6Bd,EAA7B,EAAgC;AACrCA,KAAG,IAAH,EAASc,KAAKX,EAAd;AACD;AACM,SAASR,eAAT,CAA0BQ,EAA1B,EAA8BH,EAA9B,EAAkC;AACvC,iBAAKgB,QAAL,CAAcb,EAAd,EAAkB;AAAA,QAACc,GAAD,uEAAO,IAAP;AAAA,QAAaH,IAAb;AAAA,WAAuBd,GAAGiB,GAAH,EAAQH,IAAR,CAAvB;AAAA,GAAlB;AACD;;AAEM,SAASlB,UAAT,CAAoBsB,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoC;AACzC,MAAIF,IAAIG,eAAJ,EAAJ,EAA2B;AACzB,WAAOD,MAAP;AACD;AACDD,MAAIG,QAAJ,CAAa,GAAb;AACD","file":"auth.js","sourcesContent":["import User from '../models/user';\r\nimport approvedUsers from './approvedUsers.json';\r\n\r\nexport function twitterCallback(accessToken, refreshToken, profile, cb) {\r\n  User.findOne({ oauthID: `twitter_${profile.id}` }).exec()\r\n    .then( (result) => {\r\n      if (result) {return}\r\n      else if ( approvedUsers.indexOf(profile.username.toLowerCase()) === -1 ) {\r\n        console.log('registration denied from unapproved user: ' + profile.username )\r\n        return\r\n      }\r\n      console.log('registration allowed from approved user: ' + profile.username );\r\n      return new User({\r\n        oauthID: `twitter_${profile.id}`,\r\n        name: profile.username\r\n      }).save()\r\n    })\r\n    .then( user => {\r\n      cb(null, user);\r\n    })\r\n    .catch( cb );\r\n}\r\n\r\nexport function serializeUser(user, cb){\r\n  cb(null, user.id);\r\n}\r\nexport function deserializeUser (id, cb) {\r\n  User.findById(id, (err = null, user) =>  cb(err, user))\r\n}\r\n\r\nexport function isLoggedIn(req, res, next) {\r\n  if (req.isAuthenticated()) {\r\n    return next();\r\n  }\r\n  res.redirect('/');\r\n}"]}