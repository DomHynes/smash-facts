{"version":3,"sources":["../src/index.js"],"names":["config","app","server","createServer","use","exposedHeaders","corsHeaders","json","limit","bodyLimit","urlencoded","extended","consumerKey","process","env","TWITTER_KEY","consumerSecret","TWITTER_SECRET","callbackURL","NODE_ENV","TWITTER_CALLBACK","serializeUser","deserializeUser","secret","resave","saveUninitialized","initialize","session","__dirname","dest","compress","static","set","join","db","listen","PORT","port","console","log","address"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AACA,iBAAOA,MAAP;;AAEA,IAAIC,MAAM,wBAAV;AACAA,IAAIC,MAAJ,GAAa,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;;AAEA;AACAA,IAAIG,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEA;AACAH,IAAIG,GAAJ,CAAS,oBAAM,EAAEC,gBAAgB,kBAAOC,WAAzB,EAAN,CAAT;;AAEAL,IAAIG,GAAJ,CAAQ,qBAAWG,IAAX,CAAiB,EAAEC,OAAQ,kBAAOC,SAAjB,EAAjB,CAAR;AACAR,IAAIG,GAAJ,CAAQ,qBAAWM,UAAX,CAAuB,EAAEC,UAAW,IAAb,EAAvB,CAAR;;AAEA,mBAASP,GAAT,CAAa,8BAAa;AACxBQ,cAAaC,QAAQC,GAAR,CAAYC,WADD;AAExBC,iBAAgBH,QAAQC,GAAR,CAAYG,cAFJ;AAGxBC,cAAaL,QAAQC,GAAR,CAAYK,QAAZ,KAAyB,aAAzB,6BACaN,QAAQC,GAAR,CAAYM,gBADzB,mCAEmBP,QAAQC,GAAR,CAAYM;AALpB,CAAb,wBAAb;;AAQA,mBAASC,aAAT;AACA,mBAASC,eAAT;AACArB,IAAIG,GAAJ,CAAQ,8BAAQ;AACfmB,SAAQ,eADO;AAEdC,SAAQ,IAFM;AAGdC,oBAAmB;AAHL,CAAR,CAAR;AAKAxB,IAAIG,GAAJ,CAAQ,mBAASsB,UAAT,EAAR;AACAzB,IAAIG,GAAJ,CAAQ,mBAASuB,OAAT,EAAR;;AAEA1B,IAAIG,GAAJ,CAAQ,8BAAKwB,YAAY,mBAAjB,EACP,EAAEC,MAAMD,YAAY,kBAApB,EADO,EACmC,EADnC,EAEP,EAAEE,UAAU,MAAZ,EAFO,CAAR;AAIA7B,IAAIG,GAAJ,CAAQ,kBAAQ2B,MAAR,CAAeH,YAAY,SAA3B,CAAR;;AAEA3B,IAAI+B,GAAJ,CAAQ,OAAR,EAAiB,eAAKC,IAAL,CAAUL,SAAV,EAAqB,WAArB,CAAjB;AACA3B,IAAI+B,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;;AAEA;AACA,kBAAc,cAAM;;AAEnB;AACA/B,KAAIG,GAAJ,CAAQ,0BAAW,EAAEJ,yBAAF,EAAUkC,MAAV,EAAX,CAAR;;AAEA;AACAjC,KAAIG,GAAJ,CAAQ,MAAR,EAAgB,mBAAI,EAAEJ,yBAAF,EAAUkC,MAAV,EAAJ,CAAhB;AACAjC,KAAIG,GAAJ,CAAQ,GAAR,EAAa,mBAAI,EAAEJ,yBAAF,EAAUkC,MAAV,EAAJ,CAAb;;AAEAjC,KAAIC,MAAJ,CAAWiC,MAAX,CAAkBtB,QAAQC,GAAR,CAAYsB,IAAZ,IAAoB,kBAAOC,IAA7C,EAAmD,YAAM;AACxDC,UAAQC,GAAR,sBAA+BtC,IAAIC,MAAJ,CAAWsC,OAAX,GAAqBH,IAApD;AACA,EAFD;AAGA,CAZD;;kBAcepC,G","file":"index.js","sourcesContent":["import http from 'http';\r\nimport express from 'express';\r\nimport path from 'path';\r\nimport cors from 'cors';\r\nimport morgan from 'morgan';\r\nimport less from 'less-middleware';\r\nimport bodyParser from 'body-parser';\r\nimport session from 'express-session';\r\nimport passport from 'passport';\r\nimport Strategy from 'passport-twitter';\r\nimport initializeDb from './db';\r\nimport middleware from './middleware';\r\nimport api from './api';\r\nimport web from './web';\r\nimport config from './config/express.json';\r\nimport { serializeUser, deserializeUser, twitterCallback } from './lib/auth';\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\nlet app = express();\r\napp.server = http.createServer(app);\r\n\r\n// logger\r\napp.use(morgan('dev'));\r\n\r\n// 3rd party middleware\r\napp.use( cors( { exposedHeaders: config.corsHeaders } ) );\r\n\r\napp.use(bodyParser.json( { limit : config.bodyLimit } ) );\r\napp.use(bodyParser.urlencoded( { extended : true } ) );\r\n\r\npassport.use(new Strategy({\r\n  consumerKey: process.env.TWITTER_KEY,\r\n  consumerSecret: process.env.TWITTER_SECRET,\r\n  callbackURL: process.env.NODE_ENV === 'development'\r\n\t\t? `http://localhost:8080${process.env.TWITTER_CALLBACK}`\r\n\t\t: `http://smashfacts.domhyn.es${process.env.TWITTER_CALLBACK}`\r\n}, twitterCallback));\r\n\r\npassport.serializeUser( serializeUser );\r\npassport.deserializeUser( deserializeUser );\r\napp.use(session({\r\n\tsecret: 'fox is broken',\r\n  resave: true,\r\n  saveUninitialized: true\r\n}));\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\napp.use(less(__dirname + 'public/style/less',\r\n\t{ dest: __dirname + 'public/style/css' }, {},\r\n\t{ compress: 'auto'}\r\n));\r\napp.use(express.static(__dirname + '/public'));\r\n\r\napp.set('views', path.join(__dirname, 'web/views'));\r\napp.set('view engine', 'pug')\r\n\r\n// connect to db\r\ninitializeDb( db => {\r\n\r\n\t// internal middleware\r\n\tapp.use(middleware({ config, db }));\r\n\r\n\t// api router\r\n\tapp.use('/api', api({ config, db }));\r\n\tapp.use('/', web({ config, db }));\r\n\r\n\tapp.server.listen(process.env.PORT || config.port, () => {\r\n\t\tconsole.log(`Started on port ${app.server.address().port}`);\r\n\t});\r\n});\r\n\r\nexport default app;\r\n"]}